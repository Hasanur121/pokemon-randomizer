{"version":3,"file":"types.js","sourceRoot":"","sources":["../src/types.ts"],"names":[],"mappings":"","sourcesContent":["export type PokemonType =\r\n    'bug'\r\n    | 'dark'\r\n    | 'dragon'\r\n    | 'electric'\r\n    | 'fairy'\r\n    | 'fighting'\r\n    | 'fire'\r\n    | 'flying'\r\n    | 'ghost'\r\n    | 'grass'\r\n    | 'ground'\r\n    | 'ice'\r\n    | 'normal'\r\n    | 'poison'\r\n    | 'psychic'\r\n    | 'rock'\r\n    | 'steel'\r\n    | 'water';\r\n\r\nexport type SpecieType = PokemonType | `${PokemonType} ${PokemonType}` | 'bird normal';\r\n\r\nexport interface Form {\r\n  name: string,\r\n  type: SpecieType,\r\n  evolveTo?: string,\r\n}\r\n\r\nexport interface ListPokemon {\r\n  name: string,\r\n  type: SpecieType,\r\n  evolveTo?: string,\r\n  starter?: true,\r\n  legendary?: true,\r\n  mythical?: true,\r\n  basic?: true,\r\n  forms?: Form[],\r\n}\r\n\r\nexport interface Pokemon extends ListPokemon {\r\n  dexNo: number,\r\n}\r\n\r\nexport type PokemonMap = Record<string, ListPokemon>;\r\n\r\nexport interface TypeMatchups {\r\n  superEffective: string,\r\n  notEffective: string,\r\n  vulnerable: string,\r\n  resists: string,\r\n  immune: string,\r\n}\r\n\r\nexport type TypeMap = Record<PokemonType, TypeMatchups>;\r\n\r\nexport interface Options {\r\n  number: number,\r\n  baby?: boolean,\r\n  basic?:boolean,\r\n  evolved?: boolean,\r\n  unique?: boolean,\r\n  randomType?: boolean,\r\n  type?: PokemonType,\r\n  superEffective?: PokemonType,\r\n  starter?: boolean,\r\n  legendary?: boolean,\r\n  mythical?: boolean,\r\n  forms?: boolean,\r\n  generations?: string[],\r\n  customList?: string[],\r\n}\r\n\r\nexport interface Generation {\r\n  first: number,\r\n  last: number,\r\n}\r\n\r\nexport type GenerationMap = Record<string, Generation>;\r\n"]}
