{"version":3,"file":"picker.js","sourceRoot":"","sources":["../src/picker.ts"],"names":[],"mappings":"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","sourcesContent":["import Chance from 'chance';\r\nimport _ from 'lodash';\r\n\r\nimport * as data from './data';\r\nimport * as types from './types';\r\nimport * as validators from './validators';\r\n\r\nconst chance = new Chance();\r\n\r\nconst getRandomKey = (items: types.Pokemon[] | types.TypeMap) => {\r\n  const keys = Object.keys(items);\r\n  const numItems = keys.length;\r\n  const randomNum = chance.integer({ min: 0, max: numItems - 1 });\r\n\r\n  return keys[randomNum];\r\n};\r\n\r\nconst getFilteredPokemon = (options: types.Options) => {\r\n  const allPokemon = data.getPokemon();\r\n  const allTypes = data.getTypes();\r\n  const filteredPokemon: types.Pokemon[] = [];\r\n\r\n  Object.entries(allPokemon).forEach(([dexNo, poke]) => {\r\n    const validated = validators.validatePokemon(options, poke, parseInt(dexNo, 10), allTypes);\r\n\r\n    if (validated !== null) {\r\n      filteredPokemon.push(validated);\r\n    }\r\n  });\r\n\r\n  if (filteredPokemon.length === 0) {\r\n    throw Error(`No Pokémon satisfy those options${\r\n      options.randomType ? `\\nChosen type: ${options.type}` : ''\r\n    }`);\r\n  }\r\n\r\n  return filteredPokemon;\r\n};\r\n\r\nconst pickRandomPokemonAndOptions = (unsanitizedOptions: unknown) => {\r\n  const options = validators.validateOptions(unsanitizedOptions);\r\n  if (options && options.randomType === true && !options.type) {\r\n    const pokemonTypes = data.getTypes();\r\n    const randomType = getRandomKey(pokemonTypes) as types.PokemonType;\r\n    options.type = randomType;\r\n  }\r\n\r\n  const pokemonToPickFrom = getFilteredPokemon(options);\r\n  const pokemonKeys = Object.keys(pokemonToPickFrom);\r\n  const numPokemon = pokemonKeys.length;\r\n\r\n  if (options.unique && numPokemon < options.number) {\r\n    throw Error(`only ${\r\n      numPokemon\r\n    } Pokémon satisf${\r\n      numPokemon === 1 ? 'ies' : 'y'\r\n    } those options${\r\n      options.randomType ? `\\nChosen type: ${\r\n        options.type\r\n      }` : ''\r\n    }`);\r\n  }\r\n\r\n  const chosenPokemon: types.Pokemon[] = [];\r\n  _.times(options.number, () => {\r\n    const randomIndex = parseInt(getRandomKey(pokemonToPickFrom), 10);\r\n\r\n    const randomPokemon = options.unique\r\n      ? pokemonToPickFrom.splice(randomIndex, 1)[0]\r\n      : pokemonToPickFrom[randomIndex];\r\n    chosenPokemon.push(randomPokemon);\r\n  });\r\n\r\n  return {\r\n    pokemon: chosenPokemon,\r\n    options,\r\n  };\r\n};\r\n\r\nconst pickRandomPokemon = (unsanitizedOptions?: unknown) => {\r\n  const result = pickRandomPokemonAndOptions(unsanitizedOptions);\r\n\r\n  return result.pokemon;\r\n};\r\n\r\nexport default pickRandomPokemon;\r\n"]}
