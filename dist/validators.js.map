{"version":3,"file":"validators.js","sourceRoot":"","sources":["../src/validators.ts"],"names":[],"mappings":"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","sourcesContent":["import _ from 'lodash';\r\n\r\nimport * as data from './data';\r\nimport * as types from './types';\r\n\r\nconst DEFAULT_NUMBER = 6;\r\n\r\nconst isBoolString = (value: unknown) => {\r\n  if (typeof value === 'string') {\r\n    const lowerCase = value.trim().toLowerCase();\r\n\r\n    if (lowerCase === 'true' || lowerCase === 'false') {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  return false;\r\n};\r\n\r\nconst booleanValidator = (optionName: string, value: unknown) => {\r\n  if (value === undefined || value === null) {\r\n    return undefined;\r\n  }\r\n\r\n  if (value === true || value === false) {\r\n    return value;\r\n  }\r\n\r\n  if (isBoolString(value)) {\r\n    return (value as string).trim().toLowerCase() === 'true';\r\n  }\r\n\r\n  throw Error(`Option ${optionName} must be a boolean. Received: ${typeof value}`);\r\n};\r\n\r\nconst positiveIntegerValidator = (optionName: string, value: unknown) => {\r\n  if (value === undefined || value === null) {\r\n    return undefined;\r\n  }\r\n\r\n  const parsed = Number(value);\r\n  const isInteger = !!value && !Number.isNaN(parsed) && Number.isInteger(parsed) && parsed > 0;\r\n\r\n  if (isInteger) {\r\n    return parsed;\r\n  }\r\n\r\n  throw Error(`Option ${optionName} must be a positive integer. Received: ${typeof value}`);\r\n};\r\n\r\nconst stringValidator = (optionName: string, value: unknown) => {\r\n  if (value === undefined || value === null) {\r\n    return undefined;\r\n  }\r\n\r\n  if (_.isString(value)) {\r\n    const lower = value.trim().toLowerCase();\r\n\r\n    return lower;\r\n  }\r\n\r\n  throw Error(`Option ${optionName} must be a string. Received: ${typeof value}`);\r\n};\r\n\r\nconst typeValidator = (\r\n  optionName: string,\r\n  value: unknown,\r\n): types.PokemonType | undefined => {\r\n  if (value === null || value === undefined) {\r\n    return undefined;\r\n  }\r\n\r\n  const lowerCase = stringValidator(optionName, value) ?? '';\r\n  const validTypes = data.getTypes();\r\n\r\n  if (Object.keys(validTypes).includes(lowerCase)) {\r\n    return lowerCase as types.PokemonType;\r\n  }\r\n\r\n  throw Error(`Option ${optionName} must be a valid type. Received: ${typeof value}`);\r\n};\r\n\r\nconst generationArrayValidator = (\r\n  optionName: string,\r\n  value: string[] | undefined | null,\r\n): string[] | undefined => {\r\n  if (value === null || value === undefined) {\r\n    return undefined;\r\n  }\r\n\r\n  if (_.isArray(value)) {\r\n    const generations = data.getGenerations();\r\n    const generationList = Object.keys(generations);\r\n\r\n    if (value.every((element) => generationList.includes(element))) {\r\n      return value.map((generation) => generation.toString());\r\n    }\r\n\r\n    throw Error(\r\n      `option ${\r\n        optionName\r\n      } must be an array of existing generation numbers. Received: ${\r\n        typeof value\r\n      }`,\r\n    );\r\n  }\r\n\r\n  throw Error(\r\n    `option ${optionName} must be an array of generation numbers. Received: ${typeof value}`,\r\n  );\r\n};\r\n\r\nconst pokemonListValidator = (\r\n  optionName: string,\r\n  value: string[] | undefined | null,\r\n): string[] | undefined => {\r\n  if (value === null || value === undefined) {\r\n    return undefined;\r\n  }\r\n\r\n  if (_.isArray(value)) {\r\n    const pokemonNameList = Object.values(data.getPokemon()).map(\r\n      (pokemon) => pokemon.name.toLowerCase(),\r\n    );\r\n\r\n    if (value.every((entryValue) => pokemonNameList.includes(entryValue.toLowerCase()))) {\r\n      return value.map((name) => name.toLowerCase());\r\n    }\r\n  }\r\n\r\n  throw Error(`option ${optionName} must be an array of Pokémon names. Received: ${typeof value}`);\r\n};\r\n\r\nexport const validateOptions = (options: unknown) => {\r\n  let inputOptions: types.Options | undefined | null;\r\n\r\n  if (_.isObject(options)) {\r\n    inputOptions = options as types.Options;\r\n  } else if (options !== null && options !== undefined) {\r\n    throw new Error(`Options must be an object. Received: ${typeof options}`);\r\n  }\r\n\r\n  const sanitizedOptions: types.Options = {\r\n    number: DEFAULT_NUMBER,\r\n  };\r\n\r\n  sanitizedOptions.number = positiveIntegerValidator(\r\n    'number',\r\n    inputOptions?.number,\r\n  ) ?? DEFAULT_NUMBER;\r\n  sanitizedOptions.baby = booleanValidator('baby', inputOptions?.baby);\r\n  sanitizedOptions.basic = booleanValidator('basic', inputOptions?.basic);\r\n  sanitizedOptions.evolved = booleanValidator('evolved', inputOptions?.evolved);\r\n  sanitizedOptions.unique = booleanValidator('unique', inputOptions?.unique);\r\n  sanitizedOptions.randomType = booleanValidator('randomType', inputOptions?.randomType);\r\n  sanitizedOptions.type = typeValidator('type', inputOptions?.type);\r\n  sanitizedOptions.superEffective = typeValidator('superEffective', inputOptions?.superEffective);\r\n  sanitizedOptions.starter = booleanValidator('starter', inputOptions?.starter);\r\n  sanitizedOptions.legendary = booleanValidator('legendary', inputOptions?.legendary);\r\n  sanitizedOptions.mythical = booleanValidator('mythical', inputOptions?.mythical);\r\n  sanitizedOptions.forms = booleanValidator('forms', inputOptions?.forms);\r\n  sanitizedOptions.generations = generationArrayValidator(\r\n    'generations',\r\n    inputOptions?.generations,\r\n  );\r\n  sanitizedOptions.customList = pokemonListValidator('customList', inputOptions?.customList);\r\n\r\n  return sanitizedOptions;\r\n};\r\n\r\nexport const validatePokemon = (\r\n  options: types.Options,\r\n  poke: types.ListPokemon,\r\n  dexNo: number,\r\n  allTypes: types.TypeMap,\r\n): types.Pokemon | null => {\r\n  const pokeCopy: types.ListPokemon = { ...poke };\r\n  if (options) {\r\n    if (!options.forms) {\r\n      delete pokeCopy.forms;\r\n    }\r\n\r\n    if (options.customList) {\r\n      return options.customList.includes(pokeCopy.name.toLowerCase())\r\n        ? { ...pokeCopy, dexNo }\r\n        : null;\r\n    }\r\n\r\n    if (options.baby\r\n            && (!pokeCopy.evolveTo\r\n                || parseInt(pokeCopy.evolveTo, 10) > dexNo)) {\r\n      return null;\r\n    }\r\n\r\n    if (options.basic && !pokeCopy.basic) {\r\n      return null;\r\n    }\r\n    if (options.evolved) {\r\n      if (pokeCopy.evolveTo) {\r\n        return null;\r\n      }\r\n      if (options.forms && pokeCopy.forms) {\r\n        pokeCopy.forms = pokeCopy.forms.filter((form) => !form.evolveTo);\r\n      }\r\n    }\r\n\r\n    const pokeTypes = pokeCopy.type.split(' ') as types.PokemonType[];\r\n    if (options.type) {\r\n      if (options.forms && pokeCopy.forms) {\r\n        let allMonTypes = pokeTypes;\r\n        pokeCopy.forms.forEach(\r\n          (form) => allMonTypes.push(...form.type.split(' ') as types.PokemonType[]),\r\n        );\r\n        allMonTypes = _.uniq(allMonTypes);\r\n\r\n        if (!allMonTypes.includes(options.type)) {\r\n          return null;\r\n        }\r\n\r\n        pokeCopy.forms = pokeCopy.forms.filter((form) => {\r\n          const formTypes = form.type.split(' ') as types.PokemonType[];\r\n\r\n          return formTypes.includes(options.type!);\r\n        });\r\n      }\r\n      if (!pokeTypes.includes(options.type)) {\r\n        return null;\r\n      }\r\n    }\r\n\r\n    if (options.superEffective) {\r\n      const type = allTypes[options.superEffective];\r\n\r\n      if (type) {\r\n        const vulnerables = type.vulnerable.split(' ');\r\n        if (!_.intersection(pokeTypes, vulnerables).length) {\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (options.starter && !pokeCopy.starter) {\r\n      return null;\r\n    }\r\n\r\n    if (options.legendary && !pokeCopy.legendary && !pokeCopy.mythical) {\r\n      return null;\r\n    }\r\n\r\n    if (options.mythical && !pokeCopy.mythical) {\r\n      return null;\r\n    }\r\n\r\n    if (options.generations) {\r\n      const allGens = data.getGenerations();\r\n      if (!options.generations.some((gen) => dexNo >= allGens[gen].first\r\n                && dexNo <= allGens[gen].last)) {\r\n        return null;\r\n      }\r\n    }\r\n  }\r\n\r\n  return { ...pokeCopy, dexNo };\r\n};\r\n"]}
